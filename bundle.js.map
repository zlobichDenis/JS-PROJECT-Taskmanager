{"version":3,"sources":["webpack://Task Manager/./src/components/abstract-component.js","webpack://Task Manager/./src/components/board-tasks.js","webpack://Task Manager/./src/components/boardFilters.js","webpack://Task Manager/./src/components/btnLoadMore.js","webpack://Task Manager/./src/components/cardExample.js","webpack://Task Manager/./src/components/cardForm.js","webpack://Task Manager/./src/components/filters.js","webpack://Task Manager/./src/components/menu.js","webpack://Task Manager/./src/components/no-tasks-component.js","webpack://Task Manager/./src/components/tasks-list-component.js","webpack://Task Manager/./src/const.js","webpack://Task Manager/./src/controllers/board-contoller.js","webpack://Task Manager/./src/controllers/task-contoller.js","webpack://Task Manager/./src/mock/filter.js","webpack://Task Manager/./src/mock/task.js","webpack://Task Manager/./src/render.js","webpack://Task Manager/./src/util.js","webpack://Task Manager/webpack/bootstrap","webpack://Task Manager/webpack/runtime/define property getters","webpack://Task Manager/webpack/runtime/hasOwnProperty shorthand","webpack://Task Manager/webpack/runtime/make namespace object","webpack://Task Manager/./src/main.js"],"names":[],"mappings":"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E;AACA;AACA;;AAEA;AACA;AACA,4CAA4C;;AAE5C,6DAA6D,cAAc;AAC3E;AACA;;AAEe,qBAAqB,2DAAiB;AACrD;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;AClC6C;AACW;;AAExD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEe,uBAAuB,2DAAiB;AACvD;AACA;AACA;AACA,C;;;;;;;;;;;;;;;ACvCqD;;AAErD;AACA;AACA;AACA;AACA;;AAEe,8BAA8B,wDAAiB;AAC9D;AACA;AACA;AACA,C;;;;;;;;;;;;;;;ACZwD;;AAExD;AACA;AACA,E;;AAEe,uBAAuB,2DAAiB;AACvD;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;ACfgE;AACN;AACD;AACA;AACS;AACL;;;AAGS;AACb;AACR;;;AAGjD;AACA;;AAEA;AACA;AACA,+BAA+B,uDAAc;;AAE7C;;AAEA;AACA,GAAG;AACH;;AAEA;AACA;AACA;;AAEA;AACA,aAAa,yEAAgB;AAC7B;AACA;AACA,aAAa,2EAAkB;AAC/B;AACA;AACA,aAAa,yEAAgB;AAC7B;AACA;AACA;;AAEA;AACA;;;;AAIe;AACf;AACA;AACA;AACA;AACA;AACA,oCAAoC,sEAAe;AACnD,mCAAmC,wEAAQ;AAC3C,kCAAkC,gEAAa;AAC/C,4CAA4C,+DAAoB;AAChE;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,oBAAoB;;AAEpB;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;;AAEA;AACA;AACA,YAAY,kDAAM,mCAAmC,gEAAwB;AAC7E;AACA;AACA,QAAQ,kDAAM,iCAAiC,iEAAyB;AACxE,QAAQ,kDAAM,kCAAkC,gEAAwB;;AAExE;;AAEA;AACA;;AAEA;AACA;AACA;AACA,WAAW,EAAE;;AAEb;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA,gBAAgB;AAChB;AACA,YAAY;AACZ;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;;AAGA;AACA,QAAQ,kDAAM;AACd;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;;;;;;;;;;;;;;;;;AC7IgD;AACC;AACc;;AAEhD;AACf;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,YAAY,mDAAO;AACnB;;AAEA;AACA;AACA,YAAY,mDAAO;AACnB;;AAEA;AACA;;;AAGA;AACA;AACA,WAAW;;AAEX;AACA;AACA;AACA,WAAW;AACX,cAAc,kDAAM,0BAA0B,gEAAwB;AACtE;AACA,C;;;;;;;;;;;;;;ACnCA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;;AAE2B;;;;;;;;;;;;;;;;;;;ACX0G;AAChF;AACrD;AACA,kDAAkD,uDAAa;;AAE/D;AACA,qBAAqB,gEAAsB,CAAC,gDAAS;AACrD,eAAe,gEAAsB,CAAC,kDAAW;AACjD;AACA;AACA;AACA,kCAAkC,2DAAqB,GAAG,+DAAqB;AAC/E;AACA;;AAEA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;ACjBO;AACP;AACA;AACA;AACA;;AAEO;AACP;AACA;AACA;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEO;AACP;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEO;AACP;AACA;AACA,C;;;;;;;;;;;;;;;;;;;ACrCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA,4BAA4B,MAAM;AAClC;;AAEA;AACA;AACA;;AAEA,cAAc,MAAM,GAAG,QAAQ;AAC/B;;AAEA;AACA,2BAA2B,yBAAyB,2BAA2B;AAC/E;;;;;;;;;;;;UCzCA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA;WACA,wCAAwC,yCAAyC;WACjF;WACA;WACA,E;;;;;WCPA,wF;;;;;WCAA;WACA;WACA;WACA,sDAAsD,kBAAkB;WACxE;WACA,+CAA+C,cAAc;WAC7D,E;;;;;;;;;;;;;;;;;;ACNyD;AACH;AACD;AACU;;;;;AAKM;AAClB;AACJ;;;AAG/C;;;AAGA;AACA;AACA;;;AAGA,cAAc,4DAAa;AAC3B,gBAAgB,gEAAe;;AAE/B,kDAAM,wBAAwB,wDAAiB,IAAI,gEAAwB;AAC3E,kDAAM,sBAAsB,2DAAe,WAAW,gEAAwB;;AAE9E,2BAA2B,+DAAc;AACzC,4BAA4B,oEAAe;;AAE3C,kDAAM,kCAAkC,gEAAwB;AAChE","file":"bundle.js","sourcesContent":["import { createElement } from \"../render.js\";\n\nexport default class AbstractComponent {\n    constructor() {\n        if(new.target === AbstractComponent) {\n            throw new Error(`Can't instance AbstractComponent, only concrete one.`);\n        }\n        this._element = null;\n    }\n\n    getTemplate() {\n        throw new Error ('Abstract method not implemented: getTemplate');\n    }\n\n    getElement() {\n        if(!this._element) {\n            this._element = createElement(this.getTemplate());\n        }\n\n        return this._element;\n    }\n\n    removeElement() {\n        this._element = null;\n    }\n}","import AbstractComponent from \"./abstract-component.js\";\n\nconst createBoardTemplate = () => {\n    return `<section class=\"board container\"></section>\n    `\n}; \n\nexport default class Board extends AbstractComponent {\n    getTemplate() {\n        return createBoardTemplate();\n    }\n}","import AbstractComponent from \"./abstract-component.js\";\n\nexport const SortType = {\n    DATE_DOWN: 'date-down',\n    DATE_UP: 'date-up',\n    DEFAULT: 'default',\n};\n\nconst createSortTemplate = () => {\n    return `<div class=\"board__filter-list\">\n            <a href=\"#\" class=\"board__filter\" data-sort-type=\"${SortType.DEFAULT}\">SORT BY DEFAULT</a>\n            <a href=\"#\" class=\"board__filter\" data-sort-type=\"${SortType.DATE_UP}\">SORT BY DATE up</a>\n            <a href=\"#\" class=\"board__filter\" data-sort-type=\"${SortType.DATE_DOWN}\">SORT BY DATE down</a>\n        </div>\n    `\n};\n\nexport default class Sort extends AbstractComponent {\n    constructor() {\n        super();\n\n        this._currentSortType = SortType.DEFAULT;\n    }\n    getTemplate() {\n        return createSortTemplate();\n    }\n\n    getSortType() {\n        return this._currentSortType;\n    }\n\n    setSortTypeChangeHandler(handler) {\n        this.getElement().addEventListener('click', (evt) => {\n            evt.preventDefault()\n\n            const sortType = evt.target.dataset.sortType;\n\n            if (evt.target.tagName !== 'A') {\n                return;\n            }\n\n            this._currentSortType = sortType;\n\n            handler(this._currentSortType);\n        })\n\n    }\n}\n\n","import AbstractComponent from \"./abstract-component.js\";\n\nconst createBtnLoadMore = () => {\n    return `<button class=\"load-more\" type=\"button\">load more</button>\n    `\n};\n\nexport default class LoadMoreBtn extends AbstractComponent {\n    getTemplate() {\n        return createBtnLoadMore();\n    }\n\n    setClickHandler(handler) {\n        this.getElement().addEventListener('click', handler);\n    }\n};\n","import { COLORS_CARD, TASK_DESC, MONTH_NAMES } from \"../const.js\";\nimport { formatTime } from \"../util.js\";\nimport AbstractComponent from \"./abstract-component.js\";\n\nconst createButtonMarkup = (name, isActive = true) => {\n  return (\n    `<button type=\"button\" class=\"card__btn card__btn--${name} ${isActive ? '' : 'card__btn--disabled'}\">\n    ${name}\n  </button>`\n  )\n};\n\n\nconst createCardTemplate = (task) => {\n\n  const {description, color, reapeatingDays, dueDate} = task;\n\n  const isExpired = dueDate instanceof Date && dueDate < Date.now(); \n  const isDateShowing = !!dueDate; \n\n  const date = isDateShowing ? `${dueDate.getDate()} ${MONTH_NAMES[dueDate.getMonth()]}` : '';  \n  const time = isDateShowing ? formatTime(dueDate) : '';\n \n  const isRepeat = (element) => {\n   return element === true;\n  };\n\n  const editButton = createButtonMarkup('edit');\n  const archiveButton = createButtonMarkup('archive', !task.isArchive);\n  const favoriteButton = createButtonMarkup('favorites', !task.isFavorite);\n\n  const deadlineClass = isExpired ? `card--deadline` : ``; \n  const isRepeated = Object.values(reapeatingDays).some(isRepeat); \n\n  const repeatClass = isRepeated ? 'card--repeat' : '';\n\n    return `<article class=\"card card--${color} ${repeatClass} ${deadlineClass}\"\n    >\n    <div class=\"card__form\">\n      <div class=\"card__inner\">\n        <div class=\"card__control\">\n          ${editButton}\n          ${archiveButton}\n          ${favoritesButton}\n        </div>\n\n        <div class=\"card__color-bar\">\n          <svg class=\"card__color-bar-wave\" width=\"100%\" height=\"10\">\n            <use xlink:href=\"#wave\"></use>\n          </svg>\n        </div>\n\n        <div class=\"card__textarea-wrap\">\n          <p class=\"card__text\">${description}</p>\n        </div>\n\n        <div class=\"card__settings\">\n          <div class=\"card__details\">\n            <div class=\"card__dates\">\n              <div class=\"card__date-deadline\">\n                <p class=\"card__input-deadline-wrap\">\n                  <span class=\"card__date\">${isDateShowing ? date : ''}</span>\n                  <span class=\"card__time\">${time}</span>\n                </p>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </article>\n    `\n};\n\nexport default class Task extends AbstractComponent {\n    constructor(task) {\n      super();\n      this._task = task;\n    }\n\n    getTemplate() {\n      return createCardTemplate(this._task);\n    }\n\n    setEditButtonClickHandler(handler) {\n      this.getElement().querySelector('.card__btn--edit').addEventListener('click', handler)\n    }\n\n    setFavoritesButtonClickHandler(handler) {\n      this.getElement().querySelector('.card_btn--favorites')\n      .addEventListener('click', handler);\n    }\n\n    setArchiveButtonClickHandler(handler) {\n      this.getElement().querySelector('.card__btn--archive')\n      .addEventListener('click', handler);\n    }\n}\n\n\n","import { COLORS_CARD, TASK_DESC, MONTH_NAMES } from \"../const.js\";\nimport { formatTime } from \"../util.js\";\nimport AbstractComponent from \"./abstract-component.js\";\n\n\n\nconst createColorsMarkup = () => {\n  return COLORS_CARD.map((color) => {\n    return `\n    <input type=\"radio\" id=\"color-${color}-4\" class=\"card__color-input card__color-input--${color} visually-hidden\" name=\"color\"value=\"${color}\"\n    ${color === 'black' ? 'checked' : ''}/>\n    <label for=\"color-${color}-4\" class=\"card__color card__color--${color}\">${color}</label\n>\n`\n  }).join('\\n');\n};\n\nconst createRepeatingDaysMarkup = (reapeatingDays) => { \n  const keys = Object.keys(reapeatingDays);\n  return keys.map((key) => {\n    return `\n    <input class=\"visually-hidden card__repeat-day-input\" type=\"checkbox\" id=\"repeat-${key}-4\" name=\"repeat\" value=\"${key}\" ${reapeatingDays[key] ? 'checked = \"true\"' : ''}/>\n  <label class=\"card__repeat-day\" for=\"repeat-${key}-4\">${key}</label>\n`\n  }).join('\\n');\n};\n\n\nconst createEditCardForm = (task) => {\n\n  const {description, color, reapeatingDays, dueDate} = task;\n\n\n\n  const reapeatingDaysMarkup = createRepeatingDaysMarkup(reapeatingDays); \n  const colors = createColorsMarkup(); \n\n  const isExpired = dueDate instanceof Date && dueDate < Date.now(); \n  const isDateShowing = !!dueDate;\n  const date = isDateShowing ? `${dueDate.getDate()} ${MONTH_NAMES[dueDate.getMonth()]}` : '';  \n  const time = isDateShowing ? formatTime(dueDate) : '';\n  const deadlineClass = isExpired ? `card--deadline` : ``; // для карточки задачи \n\n\n  const isRepeat = (element) => {\n   return element === true;\n  };\n  const isRepeated = Object.values(reapeatingDays).some(isRepeat); \n\n  const repeatClass = isRepeated ? 'card--repeat' : '';\n\n    return `<article class=\"card card--edit card--${color} ${repeatClass} ${deadlineClass}\">\n    <form class=\"card__form\" method=\"get\">\n      <div class=\"card__inner\">\n        <div class=\"card__color-bar\">\n          <svg class=\"card__color-bar-wave\" width=\"100%\" height=\"10\">\n            <use xlink:href=\"#wave\"></use>\n          </svg>\n        </div>\n\n        <div class=\"card__textarea-wrap\">\n          <label>\n            <textarea\n              class=\"card__text\"\n              placeholder=\"Start typing your text here...\"\n              name=\"text\"\n            >${description}</textarea>\n          </label>\n        </div>\n\n        <div class=\"card__settings\">\n          <div class=\"card__details\">\n            <div class=\"card__dates\">\n              <button class=\"card__date-deadline-toggle\" type=\"button\">\n                date: <span class=\"card__date-status\">${isDateShowing ? 'yes' : 'no'}</span>\n              </button>\n              ${isDateShowing ? `\n                    <fieldset class=\"card__date-deadline\">\n                      <label class=\"card__input-deadline-wrap\">\n                        <input\n                          class=\"card__date\"\n                          type=\"text\"\n                          placeholder=\"\"\n                          name=\"date\"\n                          value=\"${date} ${time}\"\n                        />\n                      </label>\n                    </fieldset>`\n               : ''}\n              <button class=\"card__repeat-toggle\" type=\"button\">\n                repeat:<span class=\"card__repeat-status\">${isRepeated ? 'yes' : 'no'}</span>\n              </button>\n\n              <fieldset class=\"card__repeat-days\">\n                <div class=\"card__repeat-days-inner\">\n                  ${reapeatingDaysMarkup}\n                </div>\n              </fieldset>\n            </div>\n          </div>\n\n          <div class=\"card__colors-inner\">\n            <h3 class=\"card__colors-title\">Color</h3>\n            <div class=\"card__colors-wrap\">\n              ${colors}\n            </div>\n          </div>\n        </div>\n\n        <div class=\"card__status-btns\">\n          <button class=\"card__save\" type=\"submit\">save</button>\n          <button class=\"card__delete\" type=\"button\">delete</button>\n        </div>\n      </div>\n    </form>\n  </article>\n  `\n};\n\n\nexport default class EditForm extends AbstractComponent {\n  constructor(task) {\n    super()\n    this._task = task;\n  }\n\n  getTemplate() {\n    return createEditCardForm(this._task);\n  }\n\n  setSubmitHandler(handler) {\n    this.getElement().querySelector('form').addEventListener('submit', handler)\n  }\n}\n","import AbstractComponent from \"./abstract-component.js\";\n\nconst createInput = (filter, isChecked) => {\n    const {name, count} = filter;\n    return `<input\n            type=\"radio\"\n            id=\"filter__${name}\"\n            class=\"filter__input visually-hidden\"\n            name=\"filter\"\n            ${isChecked ? 'checked' : ''} />\n        <label for=\"filter__${name}\" class=\"filter__label\">\n            ${name} <span class=\"filter__${name}-count\">${count}</span>\n        </label>\n        `\n};\n\nconst createFilterTemplate = (filters) => {\n    const filtersMarkup = filters.map((filter, i) => {\n        return createInput(filter, i === 0)}).join('\\n');\n\n    return `<section class=\"main__filter filter container\">${filtersMarkup}</section> \n    `\n};\n\nexport default class Filter extends AbstractComponent {\n    constructor(filters) {\n        super();\n\n        this._filters = filters;\n    }\n    \n    getTemplate() {\n        return createFilterTemplate(this._filters);\n    }\n}\n","import { createElement } from \"../render.js\";\nimport AbstractComponent from \"./abstract-component.js\";\n\nconst createSiteMenuTemplate = () => {\n    return `<section class=\"control__btn-wrap\">\n            <input\n                type=\"radio\"\n                name=\"control\"\n                id=\"control__new-task\"\n                class=\"control__input visually-hidden\"\n            />\n            <label for=\"control__new-task\" class=\"control__label control__label--new-task\"\n                >+ ADD NEW TASK</label\n            >\n            <input\n                type=\"radio\"\n                name=\"control\"\n                id=\"control__task\"\n                class=\"control__input visually-hidden\"\n                checked\n            />\n            <label for=\"control__task\" class=\"control__label\">TASKS</label>\n            <input\n                type=\"radio\"\n                name=\"control\"\n                id=\"control__statistic\"\n                class=\"control__input visually-hidden\"\n            />\n            <label for=\"control__statistic\" class=\"control__label\"\n                >STATISTICS</label\n            >\n            </section>\n    `\n};\n\nexport default class SiteMenu extends AbstractComponent {\n    getTemplate() {\n        return createSiteMenuTemplate();\n    }\n}","import AbstractComponent from \"./abstract-component\";\n\nconst createNoTasksTemplate = () => {\n    return `<p class=\"board__no-tasks\">\n      Click «ADD NEW TASK» in menu to create your first task\n    </p>`\n};\n\nexport default class NoTaskComponent extends AbstractComponent{\n    getTemplate() {\n        return createNoTasksTemplate();\n    }\n}","import AbstractComponent from \"./abstract-component.js\";\n\nconst createTaskListTemplate = () => {\n    return `<div class=\"board__tasks\"></div>`\n}; \n\nexport default class TaskList extends AbstractComponent {\n    getTemplate() {\n        return createTaskListTemplate();\n    }\n}\n\n","const TASK_DESC = ['Сделать домашку', 'Изучить теорию', 'Приготовить еду'];\nconst COLORS_CARD = ['black', 'yellow', 'blue', 'green', 'pink'];\nconst MONTH_NAMES = [\n    'January',\n    'Febrary',\n    'March',\n    'April',\n    'May',\n    'June',\n    'July',\n    'August',\n    'Semtember',\n    'October',\n    'November',\n    'December',\n];\nexport { COLORS_CARD, MONTH_NAMES, TASK_DESC };","import LoadMoreBtnComponent from '../components/btnLoadMore.js';\nimport EditFormComponent from '../components/cardForm.js';\nimport TaskComponent from '../components/cardExample.js';\nimport SortComponent from '../components/boardFilters.js'\nimport NoTaskComponent from '../components/no-tasks-component.js';\nimport TaskList from '../components/tasks-list-component.js';\n\n\nimport { render, RenderPosition, replace, remove } from \"../render.js\"\nimport { SortType } from '../components/boardFilters.js';\nimport TaskController from './task-contoller.js';\n\n\nconst SHOW_TASK_START = 8;\nconst SHOW_TASK_BY_BTN = 4;\n\nconst renderTasks = (tasksList, tasks) => {\n  return tasks.map((task) => {\n    const taskController = new TaskController(tasksList);\n\n    taskController.render(task);\n\n    return taskController;\n  })\n};\n\nconst getSortedTasks = (tasks, sortType, from, to) => {\n    let sortedTasks = [];\n    const showingTaks = tasks.slice();\n\n    switch (sortType){\n        case SortType.DATE_UP:\n            sortedTasks = showingTaks.sort((a, b) => a.dueDate - b.dueDate);\n            break;\n        case SortType.DATE_DOWN:\n            sortedTasks = showingTaks.sort((a, b) => b.dueDate - a.dueDate);\n            break;\n        case SortType.DEFAULT:\n            sortedTasks = showingTaks;\n            break;\n    }\n\n    return sortedTasks.slice(from, to);\n};\n\n\n\nexport default class BoardController {\n    constructor(container) {\n        this._container = container;\n        this._tasks = [];\n        this._showedTaskContollers = [];\n        this._showingTasksCount = SHOW_TASK_START;\n        this._noTaskComponent = new NoTaskComponent();\n        this._tasksComponent = new TaskList();\n        this._sortComponent = new SortComponent();\n        this._loadMoreButtonComponent = new LoadMoreBtnComponent();\n    }\n\n    render(tasks) {\n\n        // const renderLoadButton = () => {\n        //     if (showingTasksCounter >= tasks.length) {\n        //         return;\n        //     }\n\n        //     render (container, this._loadMoreButtonComponent, RenderPosition.BEFOREEND);\n\n        //     this._loadMoreButtonComponent.setClickHandler(() => {\n        //         const prevTasksCount = showingTasksCounter;\n        //         showingTasksCounter = showingTasksCounter + SHOW_TASK_BY_BTN;\n      \n        //         tasks.slice(prevTasksCount, showingTasksCounter).forEach((task) => {\n        //           renderTask(tasksList, task);\n        //         });\n            \n        //         if (showingTasksCounter >= tasks.length) {\n        //           remove(this._loadMoreButtonComponent);\n        //         };\n        //       });\n        // };\n        this._tasks = tasks;\n        const container = this._container.getElement()\n\n        const isAllTasksArchived = tasks.every((task) => task.isArchive);\n        if (isAllTasksArchived) {\n            render(container, this._noTaskComponent, RenderPosition.BEFOREEND);\n            return;\n        }\n        render(container, this._sortComponent, RenderPosition.AFTERBEGIN);\n        render(container, this._tasksComponent, RenderPosition.BEFOREEND);\n\n        const tasksList = this._tasksComponent.getElement();\n\n        const newTasks = renderTasks(tasksList, tasks.slice(0, this._showingTasksCount));\n        this._showedTaskContollers = this._showedTaskContollers.concat(newTasks);\n      \n/*         let showingTasksCounter = SHOW_TASK_START;\n          tasks.slice(0, showingTasksCounter).forEach(task => {\n            renderTask(tasksList, task);\n          }); */\n        \n        this._renderLoadMoreButton();\n        // this._sortComponent.setSortTypeChangeHandler((sortType) => {\n        //     showingTasksCounter = SHOW_TASK_START;\n\n        //     const sortedTasks = getSortedTasks(tasks, sortType, 0, showingTasksCounter);\n\n        //     tasksList.innerHTML = '';\n\n        //     sortedTasks.slice(0, showingTasksCounter).forEach((task) => {\n        //         renderTask(tasksList, task);\n        //     });\n        //     renderLoadButton()\n        // });\n    };\n\n    _renderLoadMoreButton() {\n      const taskList = this._tasksComponent.getElement();\n      this._showingTasksCount = this._showingTasksCount + SHOW_TASK_BY_BTN;\n      \n      const sortedTasks = getSortedTasks(this._tasks, this._sortComponent.getSortType(), prevTasksCount, this._showingTasksCount);\n      const newTasks = renderTasks(taskList, sortedTasks)\n\n      this._showedTaskContollers = this._showedTaskContollers.concat(newTasks);\n\n    \n      if (showingTasksCounter >= tasks.length) {\n        remove(this._loadMoreButtonComponent);\n      };\n    }\n\n    _onSortTypeChange(sortType) {\n      tasksList.innerHTML = '';\n      showingTasksCounter = SHOW_TASK_START;\n\n      const newTasks = renderTasks(taskList, sortedTasks);\n      this._showedTaskContollers = newTasks;\n\n      this._renderLoadMoreButton();\n    }\n}\n\n","import Task from \"../components/cardExample.js\";\nimport EditForm from \"../components/cardForm.js\";\nimport { render, replace, RenderPosition } from \"../render.js\";\n\nexport default class TaskController {\n    constructor(container) {\n        this._container = container;\n        this._taskComponent = null;\n        this._taskEditComponent = null;\n    }\n\n    render(task) {\n        const clickOnEditBtn = () => {\n            replace(taskEditComponent, taskComponent);\n          };\n        \n          const submitEditForm = (evt) => {\n            evt.preventDefault();\n            replace(taskComponent, taskEditComponent);\n          };\n        \n          const taskComponent = new TaskComponent(task);\n          const taskEditComponent = new EditFormComponent(task);\n        \n        \n          taskComponent.setEditButtonClickHandler(() => {\n            clickOnEditBtn()\n          });\n        \n          taskEditComponent.setSubmitHandler((evt) => {\n            evt.preventDefault();\n            submitEditForm();\n          });\n              render(taskList, taskComponent, RenderPosition.BEFOREEND);\n    }\n}","const filterNames  = ['all', 'overdue', 'today', 'favorites', 'repeating', 'archive'];\n\nconst generateFilters = () => {\n   return filterNames.map((filterName) => {\n        return {\n            name: filterName,\n            count: parseInt(Math.random() * 20),\n        }\n   });\n};\n\nexport { generateFilters };\n\n","import { getRandomElemFromArray, getRandomIntNumber, getRandomDate, generateRepeatingDays, defaultReapeatingDays } from \"../util.js\";\nimport { COLORS_CARD, TASK_DESC } from \"../const.js\";\nconst generateTask = () => {\n    const dueDate =  Math.random() > 0.5 ? null : getRandomDate();\n\n    return {\n        description: getRandomElemFromArray(TASK_DESC),\n        color: getRandomElemFromArray(COLORS_CARD),\n        isArchive: Math.random() > 0.5,\n        isFavorite: Math.random() > 0.5,\n        dueDate,\n        reapeatingDays: dueDate ? defaultReapeatingDays : generateRepeatingDays(),\n    };\n};\n\nconst generateTasks = (count) => {\n    return new Array(count).fill('').map(generateTask);\n};\n\n\nexport { generateTasks, generateTask};","export const createElement = (template) => {\n    const newElement = document.createElement('div');\n    newElement.innerHTML = template;\n    return newElement.firstChild;\n};\n\nexport const RenderPosition = {\n    AFTERBEGIN: 'afterbegin',\n    BEFOREEND: 'beforeend',\n};\n\nexport const render = (container, component, place) => {\n    switch (place) {\n        case RenderPosition.AFTERBEGIN:\n            container.prepend(component.getElement());\n            break;\n        case RenderPosition.BEFOREEND:\n            container.append(component.getElement())\n            break;\n    }\n};\n\nexport const replace = (newComponent, oldComponent) => {\n    const parentElement = oldComponent.getElement().parentElement;\n    const newElement = newComponent.getElement();\n    const oldElement = oldComponent.getElement();\n\n    const isExistElement = !!(parentElement && newElement && oldElement);\n\n    if(isExistElement && parentElement.contains(oldElement)) {\n        parentElement.replaceChild(newElement, oldElement);\n    }\n};\n\nexport const remove = (component) => {\n    component.getElement().remove();\n    component.removeElement();\n}","const defaultReapeatingDays = {\n    'mo': false,\n    'tu': false,\n    'we': false,\n    'th': false,\n    'fr': false,\n    'sa': false,\n    'su': false,\n};\n\nconst getRandomIntNumber = (min, max) => {\n    return parseInt(Math.random() * (max - min) + min);\n};\n\nconst getRandomElemFromArray = (array) => {\n    return array[getRandomIntNumber(0, array.length - 1)];\n};\n\nconst getRandomDate = () => {\n    const targetDate = new Date;\n    const sign = Math.random() > 0.5 ? 1 : -1;\n    const diffValue = sign * getRandomIntNumber(0, 8);\n\n    targetDate.setDate(targetDate.getDate() + diffValue);\n\n    return targetDate\n};\n\nconst castTimeFormat = (value) => {\n    return value < 10 ? `0${value}` : String(value);\n};\n\nconst formatTime = (date) => {\n    const hours = castTimeFormat(date.getHours() % 12);\n    const minutes = castTimeFormat(date.getMinutes())\n\n    return `${hours}:${minutes}`\n};\n\nconst generateRepeatingDays = () => {\n    return Object.assign({}, defaultReapeatingDays,{ 'mo': Math.random() > 0.5});\n};\n\n\n\n\n\nexport {getRandomIntNumber, getRandomElemFromArray, getRandomDate, formatTime, generateRepeatingDays, defaultReapeatingDays};","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import BoardComponent from \"./components/board-tasks.js\";\nimport FilterComponent from \"./components/filters.js\";\nimport SiteMenuComponent from './components/menu.js';\nimport BoardController from \"./controllers/board-contoller.js\";\n\n\n\n\nimport { render, RenderPosition, replace, remove} from \"./render.js\";\nimport { generateFilters } from \"./mock/filter.js\";\nimport { generateTasks } from \"./mock/task.js\";\n\n\n// Variables\n\n\nconst TASK_COUNT = 22;\nconst siteMainElement = document.querySelector('.main');\nconst siteHeaderElement = document.querySelector('.main__control');\n\n\nconst tasks = generateTasks(TASK_COUNT);\nconst filters = generateFilters();\n\nrender(siteHeaderElement, new SiteMenuComponent(), RenderPosition.BEFOREEND);\nrender(siteMainElement, new FilterComponent(filters), RenderPosition.BEFOREEND);\n\nconst boardComponent = new BoardComponent();\nconst boardController = new BoardController(boardComponent);\n\nrender(siteMainElement, boardComponent, RenderPosition.BEFOREEND);\nboardController.render(tasks);\n\n\n\n"],"sourceRoot":""}